openapi: 3.0.3
info:
  title: Miniboard
  license:
    name: MIT
    url: https://github.com/ngalaiko/miniboard/blob/master/LICENSE
  version: 1.0.0
servers:
- url: https://api.miniboard.app/
tags:
- name: authorization
  description: Operations about authorization
- name: feed
  description: Operations about feed
- name: operation
  description: Operations about longrunning operations
- name: user
  description: Operations about user
paths:
  /v1/authorizations/:
    post:
      tags:
      - authorization
      summary: Creates a new authorization
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              example:
                username: "hacker123"
                password: "12345"
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Authorization"
          headers:
            Set-Cookie:
              schema:
                type: string
                example: authorization=eyJhbGciOiJFUzI1NiIsImtpZCI6IjU0MjQ4OWRkLWZkZTYtNDAxYi05MDlhLWE4YjNhMTdhMzJiYyIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2MTEyNTExOTksImlhdCI6MTYxMTI0NzU5OSwiaXNzIjoibWluaWJvYXJkLmFwcCIsImp0aSI6ImRmZjhiMzRhLWU0NzEtNDczZS1hYjBhLWY4NWFmZTBmZjQ1NiIsInN1YiI6ImMwZWExODk0LTIzMmQtNDhlNS04NmVjLTFhYTkwYjVlZWYzYiJ9.4_hCZs10D-nEm1r89jc6JRcOgmRnzpGfsWl0tscOnZhF_Sv9MVhy-sXQ_vSMHj6TWKZDX1IsgQnOqg8Jo6utJg; Path=/; Domain=localhost; Expires=Thu, 21 Jan 2021 17:46:39 GMT; HttpOnly; SameSite=None
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                message: "invalid password"
        500:
          description: Internal error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                message: "internal server error"
  /v1/feeds/:
    post:
      tags:
      - feed
      security:
      - bearerAuth: []
      - cookieAuth: []
      summary: Creates a new feed
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
                  format: url
                tag_ids:
                  type: array
                  items:
                    type: string
              example:
                url: "https://example.org/feed.xml"
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Operation"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                message: "feed not found"
        500:
          description: Internal error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                message: "internal server error"
    get:
      tags:
      - feed
      security:
      - bearerAuth: []
      - cookieAuth: []
      summary: Returns a list of existing feeds
      parameters:
      - name: page_size
        in: query
        required: false
        schema:
          type: integer
      - name: created_lt
        in: query
        required: false
        schema:
          type: string
          format: date-time
      - name: tag_id_eq
        in: query
        required: false
        schema:
          type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  feeds:
                    type: array
                    items:
                      $ref: "#/components/schemas/Feed"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                message: "failed to parse page_size"
        500:
          description: Internal error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                message: "internal server error"
  /v1/operations/{operationId}:
    get:
      tags:
      - operation
      security:
      - bearerAuth: []
      - cookieAuth: []
      summary: Returns information about an operation
      parameters:
      - name: operationId
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Operation"
        404:
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                message: "operation not found"
        500:
          description: Internal error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                message: "internal server error"
  /v1/tags/:
    post:
      tags:
      - tag
      security:
      - bearerAuth: []
      - cookieAuth: []
      summary: Creates a new tag
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
              example:
                title: "Example"
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tag"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                message: "title is empty"
        500:
          description: Internal error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                message: "internal server error"
    get:
      tags:
      - tag
      security:
      - bearerAuth: []
      - cookieAuth: []
      summary: Returns a list of existing tags
      parameters:
      - name: page_size
        in: query
        required: false
        schema:
          type: integer
      - name: created_lt
        in: query
        required: false
        schema:
          type: string
          format: date-time
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  feeds:
                    type: array
                    items:
                      $ref: "#/components/schemas/Tag"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                message: "failed to parse page_size"
        500:
          description: Internal error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                message: "internal server error"
  /v1/users/:
    post:
      tags:
      - user
      summary: Creates a new user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              example:
                username: "hacker123"
                password: "12345"
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                message: "user already exists"
        500:
          description: Internal error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                message: "internal server error"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    cookieAuth:
      type: apiKey
      in: cookie
      name: authentication
  schemas:
    Authorization:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJFUzI1NiIsImtpZCI6IjU3Y2NkMzQ1LWM3ZTUtNDcwYS04NDQwLWEzNGY5YzViNWVhZSIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2MDk3MDA5MDksImlhdCI6MTYwOTY5NzMwOSwiaXNzIjoibWluaWJvYXJkLmFwcCIsImp0aSI6ImJkNzRmNWRkLTQ4ZDAtNGEzOS04Njg4LTU1YjNhMWI5N2Q3MCIsInN1YiI6Ijg1ZWZjNzcyLTZhYWEtNDIzZC1iMzJhLTk2ZmFiNDMxMjQ2NCJ9.f8N0wcdny2oznJbYTZGlMKVXVAlZfqbMr5DP0lUSDwEZKmq6lKyNWs3XbYkOJM-qtTLK5GWpkUAry46XlTq_lg"
        user_id:
          type: string
          format: uuid
          example: "5efc772-6aaa-423d-b32a-96fab4312464"
        expires_at:
          type: string
          format: date-time
          example: "2021-01-16T16:13:33Z"
    Feed:
      type: object
      properties:
        id:
          type: string
          format: uuid
        url:
          type: string
          format: url
          example: "https://example.org/feed.xml"
        title:
          type: string
          example: "Example Feed"
        created:
          type: string
          format: date-time
          example: "2021-01-16T16:13:33Z"
        updated:
          type: string
          format: date-time
          example: "2021-01-16T16:13:33Z"
        tag_ids:
          type: array
          items:
            type: string
          example: ["5efc772-6aaa-423d-b32a-96fab4312464"]
    Operation:
      type: object
      properties:
        id:
          type: string
          format: uuid
        done:
          type: boolean
          example: true
        result:
          oneOf:
          - type: object
            properties:
              response:
                type: object
                anyOf:
                - $ref: "#/components/schemas/Feed"
          - type: object
            properties:
              error:
                $ref: "#/components/schemas/Error"
    Tag:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "5efc772-6aaa-423d-b32a-96fab4312464"
        title:
          type: string
          example: "Example"
        created:
          type: string
          format: date-time
          example: "2021-01-16T16:13:33Z"
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "5efc772-6aaa-423d-b32a-96fab4312464"
        username:
          type: string
          example: "hacker123"
    Error:
      type: object
      properties:
        message:
          type: string
          example: "something went wrong"
