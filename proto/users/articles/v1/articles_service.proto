syntax = "proto3";

package app.miniboard.users.articles.v1;

import "google/api/annotations.proto";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/wrappers.proto";

option go_package = "articles";

service ArticlesService {
    // List articles
    //
    // An endpoint to list the user's articles.
    rpc ListArticles(ListArticlesRequest) returns (ListArticlesResponse) {
        option (google.api.http) = {
            get: "/api/v1/users/{user_id=*}/articles"
        };
    }

    // Update article
    //
    // An endpoint to update the article.
    rpc UpdateArticle(UpdateArticleRequest) returns (Article) {
        option (google.api.http) = {
            patch: "/api/v1/users/{article.user_id=*}/articles/{article.id=*}"
            body: "article"
        };
    }

    // Get article
    //
    // An endpoint to get an article by id.
    rpc GetArticle(GetArticleRequest) returns (Article) {
        option (google.api.http) = {
            get: "/api/v1/users/{user_id=*}/articles/{id=*}"
        };
    }

    // Delete article
    //
    // An endpoint to delete an article by id.
    rpc DeleteArticle(DeleteArticleRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/v1/users/{user_id=*}/articles/{id=*}"
        };
    }
}

message ListArticlesRequest {
    string user_id = 1;

    // The maximum number of articles to return.
    int64 page_size = 2;

    // The next_page_token value returned from a previous List request, if any.
    string page_token = 3;

    // Filter by is_read field.
    google.protobuf.BoolValue is_read_eq = 4;

    // Filter by title field.
    google.protobuf.StringValue title_contains = 5;

    // Id of feed of the article.
    google.protobuf.StringValue feed_id_eq = 6;
}

message ListArticlesResponse {
    // There will be a maximum number of articles returned based on the page_size field int the request.
    repeated Article articles = 1;

    // Token to retrieve the next page of results, or empty if there are no more results in the list.
    string next_page_token = 2;
}

message UpdateArticleRequest {
    // The article resource which replaces the resource on the server.
    Article article = 1;

    // FieldMask of fields to update.
    // see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
    google.protobuf.FieldMask update_mask = 2;
}

message GetArticleRequest {
    string id = 1;

    string user_id = 2;

    // Specifies which parts of the article resource should be returned
    // in the response.
    ArticleView view = 3;
}

message DeleteArticleRequest {
    string id = 1;

    string user_id = 2;
}

message Article {
    // Id of the article.
    string id = 1;

    // Id of the user who owns the article.
    string user_id = 2;

    // Url of the article.
    string url = 3;

    // Title of the article.
    string title = 4;

    // Time when article was added.
    google.protobuf.Timestamp create_time = 5;

    // Readable content of the article.
    bytes content = 6;

    // SHA256 sum of the content.
    string content_sha256 = 7;

    // Mark the article as read.
    bool is_read = 8;

    // Id of feed of the article.
    string feed_id = 9;
}

enum ArticleView {
    // Not specified, equivalent to BASIC.
    ARTICLE_VIEW_UNSPECIFIED = 0;

    // Server response does not include content field.
    // Default value.
    ARTICLE_VIEW_BASIC = 1;

    // Service response includes article's content.
    ARTICLE_VIEW_FULL = 2;
}
