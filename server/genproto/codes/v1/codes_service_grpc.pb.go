// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package codes

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CodesServiceClient is the client API for CodesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CodesServiceClient interface {
	// Create authorization code.
	//
	// Returns an authorization code.
	CreateCode(ctx context.Context, in *CreateCodeRequest, opts ...grpc.CallOption) (*Code, error)
}

type codesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCodesServiceClient(cc grpc.ClientConnInterface) CodesServiceClient {
	return &codesServiceClient{cc}
}

func (c *codesServiceClient) CreateCode(ctx context.Context, in *CreateCodeRequest, opts ...grpc.CallOption) (*Code, error) {
	out := new(Code)
	err := c.cc.Invoke(ctx, "/miniboard.codes.v1.CodesService/CreateCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CodesServiceServer is the server API for CodesService service.
type CodesServiceServer interface {
	// Create authorization code.
	//
	// Returns an authorization code.
	CreateCode(context.Context, *CreateCodeRequest) (*Code, error)
}

// UnimplementedCodesServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCodesServiceServer struct {
}

func (*UnimplementedCodesServiceServer) CreateCode(context.Context, *CreateCodeRequest) (*Code, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCode not implemented")
}

func RegisterCodesServiceServer(s *grpc.Server, srv CodesServiceServer) {
	s.RegisterService(&_CodesService_serviceDesc, srv)
}

func _CodesService_CreateCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodesServiceServer).CreateCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/miniboard.codes.v1.CodesService/CreateCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodesServiceServer).CreateCode(ctx, req.(*CreateCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CodesService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "miniboard.codes.v1.CodesService",
	HandlerType: (*CodesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCode",
			Handler:    _CodesService_CreateCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "codes/v1/codes_service.proto",
}
